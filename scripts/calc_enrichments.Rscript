#!/usr/bin/env Rscript --vanilla

####
# Process args
args = commandArgs(trailingOnly=TRUE)
chip_files = unlist(strsplit(args[1], ',', fixed=TRUE))
ctrl_files = unlist(strsplit(args[2], ',', fixed=TRUE))
chip_nreads = as.numeric(args[3])
ctrl_nreads = as.numeric(args[4])
out_fname = args[5]

####
# Define functions

aggregate_reps = function(files, method="intersection") {
    # Aggregate counts across replicates. "files" is a list of
    # files containing repeat counts. Method "intersection",
    # returns values for all records appearing in all input files.
    # Method "union" returns values for all records appearing in any
    # input file.
    
    counts = read.table(files[1], stringsAsFactors=FALSE, sep="\t", header=FALSE,
    	                col.names=c("chrom", "chromStart", "chromEnd", "rep", "count1", "s1", "s2", "cov"))
    rownames(counts) = counts[,"rep"]
    counts=counts[,c("rep", "count1")]
    if (length(files) >1) {
        for (i in 2:length(files)) {
            df2 = read.table(files[i], stringsAsFactors=FALSE, sep="\t", header=FALSE,
	    	             col.names=c("chrom", "chromStart", "chromEnd", "rep", "count", "s1", "s2", "cov"))
	    rownames(df2) = df2[,"rep"]
	    head(df2)
	    df2=df2[,c("rep", "count")]
	    if ("method" == "union") {
	        counts = union_dfs(counts, df2)
	    } else {
	        # default to intersection
	    	counts = intersect_dfs(counts, df2)
	    }
        }
	counts$sum = rowSums(counts[,2:ncol(counts)], na.rm=TRUE)
    } else {
        counts$sum = counts[,"count1"]
    }
    return(counts)
}

intersect_dfs = function(df1, df2) {
    # Return the intersection of two count dataframes
    names = intersect(rownames(df1), rownames(df2))
    df_int = cbind(df1[names,], df2[names,"count"])
    colnames(df_int)[ncol(df1)+1] = paste("count", ncol(df1), sep="")
    return(df_int)
}

union_dfs = function(df1, df2) {
    # Return the union of two count dataframes
    names = union(rownames(df1), rownames(df2))
    df_int = cbind(df1[names,],	 df2[names,"count"])
    colnames(df_int)[ncol(df1)+1] = paste("count", ncol(df1),	sep="")
    return(df_int)
}

####
# Analyze inputs

chip_counts = aggregate_reps(chip_files)
ctrl_counts = aggregate_reps(ctrl_files)

dat = data.frame('chip_count' = chip_counts$sum,
      		 'input_count' = ctrl_counts[rownames(chip_counts),"sum"],
		 'chip_bg' = (chip_nreads - chip_counts$sum),
		 'input_bg' = (ctrl_nreads - ctrl_counts[rownames(chip_counts),"sum"]),
		 row.names = rownames(chip_counts),
		 stringsAsFactors=FALSE)

dat[which(is.na(dat$input_count)), "input_count"] = 0
dat[which(dat$input_count == 0), "input_bg"] = ctrl_nreads

# Run Fisher's tests
dat$fisher_pval = apply(dat, 1, function(x) { f = fisher.test(t(matrix(as.numeric(x), nrow=2, ncol=2)), alternative="g"); return(f$p.value) })
dat$fisher_pval_cor = p.adjust(dat$fisher_pval, method="bonf")
dat$chip_input_ratio = (dat$chip_count / (dat$chip_count+dat$chip_bg)) / (dat$input_count / (dat$input_count+dat$input_bg))

dat = cbind(rownames(dat), dat)
colnames(dat)[1] = "rep"

# Write output
write.table(dat, row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t", file=out_fname)
